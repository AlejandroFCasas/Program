

public async Task<List<OrderDTO>> GetOrders(DateTime? dateFrom, DateTime? dateTo, 
    List<int> customerIds, List<int> statusIds, bool? isActive)
{
    using (var context = new YourDbContext())
    {
        // Construcción de la consulta base
        var query = context.Orders.AsQueryable();
        
        // Aplicar filtros solo si los parámetros tienen valor
        if (dateFrom.HasValue)
        {
            query = query.Where(o => o.OrderDate >= dateFrom.Value);
        }
        
        if (dateTo.HasValue)
        {
            // Añadimos 1 día para incluir todo el día de dateTo
            query = query.Where(o => o.OrderDate < dateTo.Value.AddDays(1));
        }
        
        if (customerIds != null && customerIds.Any())
        {
            query = query.Where(o => customerIds.Contains(o.CustomerId));
        }
        
        if (statusIds != null && statusIds.Any())
        {
            query = query.Where(o => statusIds.Contains(o.StatusId));
        }
        
        if (isActive.HasValue)
        {
            query = query.Where(o => o.IsActive == isActive.Value);
        }
        
        // Proyección a DTO y ejecución asíncrona
        var result = await query
            .Select(o => new OrderDTO
            {
                OrderId = o.OrderId,
                OrderDate = o.OrderDate,
                CustomerId = o.CustomerId,
                CustomerName = o.Customer.Name,
                StatusId = o.StatusId,
                StatusDescription = o.Status.Description,
                IsActive = o.IsActive,
                TotalAmount = o.TotalAmount
            })
            .ToListAsync();
            
        return result;
    }
}